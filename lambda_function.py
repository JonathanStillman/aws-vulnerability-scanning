import boto3
import logging
from datetime import datetime
import os

from inspector_utils import start_assessment_runs, retrieve_assessment_results
from s3_utils import save_results_to_s3

# Set up logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Retrieve environment variables
AWS_REGION = os.environ.get('AWS_REGION', 'your-default-region')  # Replace with your AWS region
INSPECTOR_TEMPLATE_PREFIX = os.environ.get('INSPECTOR_TEMPLATE_PREFIX', 'VulnerabilityScan')
LOG_LEVEL = os.environ.get('LOG_LEVEL', 'INFO')
S3_BUCKET_NAME = os.environ.get('S3_BUCKET_NAME', 'your-s3-bucket-name')

def lambda_handler(event, context):
    try:
        # Initialize AWS Inspector client
        inspector_client = boto3.client('inspector', region_name=AWS_REGION)

        # Get the list of assessment templates
        templates_response = inspector_client.list_assessment_templates()
        template_arns = templates_response['assessmentTemplateArns']

        # Start assessments
        for template_arn in template_arns:
            start_assessment_runs([template_arn], inspector_client, INSPECTOR_TEMPLATE_PREFIX)

        # Retrieve and save assessment results to S3
        for template_arn in template_arns:
            latest_run_arn = inspector_client.list_assessment_runs(
                assessmentTemplateArns=[template_arn],
                filter={'states': ['COMPLETED']},
                maxResults=1
            )['assessmentRunArns'][0]

            results = retrieve_assessment_results(latest_run_arn, inspector_client)

            # Use the template name in the S3 key for organization
            s3_key = f'assessment_results/{template_arn.split("/")[-1]}_{datetime.now().strftime("%Y%m%d%H%M%S")}.json'

            save_results_to_s3(results, S3_BUCKET_NAME, s3_key)

        logger.info("Vulnerability scanning and result retrieval completed.")
        return {"statusCode": 200, "body": "Vulnerability scanning and result retrieval completed successfully."}

    except Exception as e:
        logger.error(f"Error: {str(e)}")
        return {"statusCode": 500, "body": "Internal Server Error"}

# If you want to test this script locally
if __name__ == "__main__":
    lambda_handler({}, {})
